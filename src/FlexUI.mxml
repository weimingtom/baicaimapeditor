<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:v="views.dashboard.*" 
	xmlns:d="views.dataEntry.*" 
	layout="absolute">
	<mx:XMLList id="mXml" xmlns="">
           	<item label="File">
                <node label="New" data="new"/>
                <node label="Open" data="open"/>
                <node label="Close" data="close"/>
                <node label="Save" data="save"/>
                <node label="Save As" data="saveas"/>
                <node type="separator"/>
                <node label="Quit" data="logout"/>
             </item>
             <item label="Edit">
                <node label="Undo" data="undo"/>
                <node type="separator"/>
                <node label="Cut" data="cut"/>
                <node label="Copy" data="copy"/>
                <node label="Paste" data="paste"/>
             </item>
             <item label="Tool">
                <node label="Pen" data="pen"/>
                <node label="Select" data="select"/>
                <node label="Move" data="move"/>
             </item>
             <item label="Help">
                <node label="Help" data="help"/>
                <node label="About" data="about"/>
             </item>
	</mx:XMLList>
	
	<mx:Script>
		<![CDATA[
		
			import flash.display.Loader;
			import flash.display.Bitmap;
			import flash.events.Event;
			import flash.events.EventDispatcher;
			import flash.net.URLRequest;
			
			import mx.core.UIComponent;
			
			import mx.controls.Button;  
            private function clickHandler():void {  
                var bt:Button = new Button();  
                addChild(bt);  
            }  
            
            private var map : Bitmap;
            private var showRange : Bitmap;
            private static const DEFAULT_POINT : Point = new Point(0,0);
            
			public function loadpic(comp : UIComponent) : void {
				var url : String = './assets/22213312.png';
				var loader : Loader = new Loader();
				var m_request : URLRequest = new URLRequest(url);
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onComplete);
				loader.load(m_request);
				function onComplete(event : Event) : void {
					map = Bitmap(event.target.content);
					var uc : UIComponent = new UIComponent();    
					showRange = new Bitmap(new BitmapData(mapbrowser.width, mapbrowser.height));
					uc.addChild(showRange);  
					uc.width = map.width;
					uc.height = map.height;
					comp.addChild(uc);
					copyPixel();
				}
			}
			
			private function copyPixel() : void {
//				m = new Matrix(1, 0, 0, 1, d.pos.x - p.pos.x, d.pos.y - p.pos.y);
//				r = new Rectangle(d.pos.x, d.pos.y, data.widthTile, data.heightTile);
//				dataCase.draw(p.source, m, null, null, r);
//				showRange.bitmapData.draw(map.bitmapData, new Matrix
				var rect : Rectangle = new Rectangle(
								mapbrowser.horizontalScrollPosition, 
								mapbrowser.verticalScrollPosition, 
								mapbrowser.width, mapbrowser.height);
				showRange.bitmapData.copyPixels(map.bitmapData, rect, DEFAULT_POINT);
				showRange.x = mapbrowser.horizontalScrollPosition;
				showRange.y = mapbrowser.verticalScrollPosition;
			}
			
			private function drawLine(fromX : int = 0, fromY : int = 0) : void {
				var lineColor : uint = 0xaaffbb;
//				version 1
//				for(var x : int = 0; x < mapbrowser.width; x++) {
//					for(var y : int = 0; y < mapbrowser.height; y++) {
//						if(x % 32 == 0 || y % 32 == 0) {
//							showRange.bitmapData.setPixel(x, y, 0xffffbb);
//						}
//					}
//				}
//				version 2
//				for(var x : int = 0; x < mapbrowser.width; x+=32) {
//					for(var y : int = 0; y < mapbrowser.height; y++) {
//						showRange.bitmapData.setPixel(x, y, 0xffffbb);
//					}
//				}
//				for(y = 0; y < mapbrowser.height; y+=32) {
//					for(x = 0; x < mapbrowser.width; x++) {
//						showRange.bitmapData.setPixel(x, y, 0xffffbb);
//					}
//				}
//				version 3
				var frameWidth : int = 64;
				var frameHeight : int = 32;
				fromX = frameWidth - mapbrowser.horizontalScrollPosition % frameWidth;
				fromY = frameHeight - mapbrowser.verticalScrollPosition % frameHeight;
				for(var y : int = fromY; y < mapbrowser.height; y+=frameHeight) {
					showRange.bitmapData.fillRect(new Rectangle(0, y, mapbrowser.width, 1), lineColor);
				}
				for(var x : int = fromX; x < mapbrowser.width; x+=frameWidth) {
					showRange.bitmapData.fillRect(new Rectangle(x, 0, 1, mapbrowser.height), lineColor);
				}
			}
			
			
			
			private function mm() : void {
				var localPos : Point = mapbrowser.globalToLocal(new Point(mouseX, mouseY));
				var paneXOffset : int = 10;
				var paneYOffset : int = 30;
				var logicX : int = (localPos.x - paneXOffset) / cellWidth;
				var logicY : int = (localPos.y - paneYOffset) / cellHeight;
				mappos.text = "("+logicX+","+logicY+")";
//				drawFocuss(logicX, logicY);
			}
			
			private var cellWidth : int = 32; 
			private var cellHeight : int = 32; 
			private function drawFocuss(logicX : int, logicY : int) : void {
				var focusColor : uint = 0xaaffbb;
				var fromX : int = logicX * cellWidth;
				var fromY : int = logicY * cellHeight;
				var focusWidth : int = 3;
				showRange.bitmapData.fillRect(new Rectangle(fromX, fromY, cellWidth, focusWidth), focusColor);
				showRange.bitmapData.fillRect(new Rectangle(fromX, fromY, focusWidth, cellHeight), focusColor);
				showRange.bitmapData.fillRect(new Rectangle(fromX + cellWidth - focusWidth, fromY, focusWidth, cellHeight), focusColor);
				showRange.bitmapData.fillRect(new Rectangle(fromX, fromY + cellHeight - focusWidth, cellWidth, focusWidth), focusColor);
			}
			
			private function scrollMove() : void {
				topleftpos.text = "("+mapbrowser.horizontalScrollPosition + 
					"," + mapbrowser.verticalScrollPosition+")";
				copyPixel();
				drawLine();
			}
		]]>
	</mx:Script>
	
	<mx:VBox width="100%" height="100%">
	
	   <mx:Canvas width="100%">
		    <mx:MenuBar labelField="@label" height="30" id="myMenu" width="100%" dataProvider="{mXml}">
		    
		    </mx:MenuBar>
	   </mx:Canvas>
	   
	   <mx:HDividedBox width="100%" height="100%">
			<mx:VDividedBox id="leftPane"
				width="40%" height="100%" >
				<v:ResBrowserPod id="resource"
					width="100%" height="100%"
					title="Resource Browser">
				</v:ResBrowserPod>
				<mx:TabNavigator width="100%" height="40%">
					<d:LayerConsole id="layeredit"
						width="100%" height="100%"
						label="Map Layer Editor">
					</d:LayerConsole>
					<d:MapConsole id="mapedit"
						width="100%" height="100%"
						label="Map Editor">
					</d:MapConsole>
					<d:ResConsole id="resedit"
						width="100%" height="100%"
						label="Resource Editor">
					</d:ResConsole>
				</mx:TabNavigator>
			</mx:VDividedBox>
			<v:MapBrowserPod id="mapbrowser"
				width="100%" height="100%"
				title="Map Browser" mouseMove="mm()" scroll="scrollMove()">
				<mx:ControlBar>
					<mx:RadioButtonGroup id="tools"/>
					<mx:RadioButton label="Pen" groupName="tools" selected="true"/>
					<mx:RadioButton label="Select" groupName="tools"/>
					<mx:RadioButton label="Move" groupName="tools"/>
					<mx:Button
							label="load map" click="loadpic(mapbrowser)"/>
					<mx:Button
							label="draw line" click="drawLine()"/>
					<mx:Label text="(0,0)" id="topleftpos"/>
					<mx:Label text="(0,0)" id="mappos"/>
				</mx:ControlBar>
			</v:MapBrowserPod>
	   </mx:HDividedBox>
	   
	</mx:VBox>
</mx:Application>
