<?xml version="1.0" encoding="utf-8"?>
<mx:Panel 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	borderStyle="solid" 
	scroll="scrollMove()">
	
	<mx:Script>
		<![CDATA[
		
			import flash.display.Loader;
			import flash.display.Bitmap;
			import flash.events.Event;
			import flash.events.EventDispatcher;
			import flash.net.URLRequest;
			
			import mx.core.UIComponent;
			
			import mx.controls.Button;  
			
            public var resourceBitmap : Bitmap;
            private var _showRangeBitmap : Bitmap;
            private static const DEFAULT_POINT : Point = new Point(0,0);
            
            public function set showRangeBitmap(value : Bitmap) : void {
            	_showRangeBitmap = value;
            	_showRangeBitmap.addEventListener(MouseEvent.MOUSE_MOVE, mm);
            }
            
            public function get showRangeBitmap() : Bitmap {
            	return _showRangeBitmap;
            }
            
			public function copyPixel() : void {
//				m = new Matrix(1, 0, 0, 1, d.pos.x - p.pos.x, d.pos.y - p.pos.y);
//				r = new Rectangle(d.pos.x, d.pos.y, data.widthTile, data.heightTile);
//				dataCase.draw(p.source, m, null, null, r);
//				showRange.bitmapData.draw(map.bitmapData, new Matrix
				var rect : Rectangle = new Rectangle(
								this.horizontalScrollPosition, 
								this.verticalScrollPosition, 
								this.width, this.height);
				_showRangeBitmap.bitmapData.copyPixels(resourceBitmap.bitmapData, rect, DEFAULT_POINT);
				_showRangeBitmap.x = this.horizontalScrollPosition;
				_showRangeBitmap.y = this.verticalScrollPosition;
			}
			
			private function drawLine(fromX : int = 0, fromY : int = 0) : void {
				var lineColor : uint = 0xaaffbb;
//				version 1
//				for(var x : int = 0; x < this.width; x++) {
//					for(var y : int = 0; y < this.height; y++) {
//						if(x % 32 == 0 || y % 32 == 0) {
//							showRange.bitmapData.setPixel(x, y, 0xffffbb);
//						}
//					}
//				}
//				version 2
//				for(var x : int = 0; x < this.width; x+=32) {
//					for(var y : int = 0; y < this.height; y++) {
//						showRange.bitmapData.setPixel(x, y, 0xffffbb);
//					}
//				}
//				for(y = 0; y < this.height; y+=32) {
//					for(x = 0; x < this.width; x++) {
//						showRange.bitmapData.setPixel(x, y, 0xffffbb);
//					}
//				}
//				version 3
				var frameWidth : int = 64;
				var frameHeight : int = 32;
				fromX = frameWidth - this.horizontalScrollPosition % frameWidth;
				fromY = frameHeight - this.verticalScrollPosition % frameHeight;
				for(var y : int = fromY; y < this.height; y+=frameHeight) {
					_showRangeBitmap.bitmapData.fillRect(new Rectangle(0, y, this.width, 1), lineColor);
				}
				for(var x : int = fromX; x < this.width; x+=frameWidth) {
					_showRangeBitmap.bitmapData.fillRect(new Rectangle(x, 0, 1, this.height), lineColor);
				}
			}
			
			
			
			private function mm() : void {
				var localPos : Point = _showRangeBitmap.globalToLocal(new Point(mouseX, mouseY));
				trace(localPos.x+","+localPos.y);
				var paneXOffset : int = 0;//10;
				var paneYOffset : int = 0;//30;
				var logicX : int = (localPos.x - paneXOffset) / cellWidth;
				var logicY : int = (localPos.y - paneYOffset) / cellHeight;
//				mappos.text = "("+logicX+","+logicY+")";
				drawFocuss(logicX, logicY);
			}
			
			private var cellWidth : int = 32; 
			private var cellHeight : int = 32; 
			private function drawFocuss(logicX : int, logicY : int) : void {
				var focusColor : uint = 0xaaffbb;
				var fromX : int = logicX * cellWidth;
				var fromY : int = logicY * cellHeight;
				var focusWidth : int = 3;
				_showRangeBitmap.bitmapData.fillRect(new Rectangle(fromX, fromY, cellWidth, focusWidth), focusColor);
				_showRangeBitmap.bitmapData.fillRect(new Rectangle(fromX, fromY, focusWidth, cellHeight), focusColor);
				_showRangeBitmap.bitmapData.fillRect(new Rectangle(fromX + cellWidth - focusWidth, fromY, focusWidth, cellHeight), focusColor);
				_showRangeBitmap.bitmapData.fillRect(new Rectangle(fromX, fromY + cellHeight - focusWidth, cellWidth, focusWidth), focusColor);
			}
			
			private function scrollMove() : void {
//				topleftpos.text = "("+this.horizontalScrollPosition + 
//					"," + this.verticalScrollPosition+")";
				copyPixel();
				drawLine();
			}
		]]>
	</mx:Script>

</mx:Panel>
