///////////////////////////////////////////////////////////
//  Cell.as
//  Macromedia ActionScript Implementation of the Class Cell
//  Generated by Enterprise Architect
//  Created on:      22-01-2010 10:39:40
//  Original author: dengyang
///////////////////////////////////////////////////////////

package org.baicaix.editor {
	import flash.events.EventDispatcher;
	import org.baicaix.editor.view.CellView;
	import org.baicaix.map.MapTile;

	import flash.display.Bitmap;
	import flash.display.BitmapData;
	import flash.display.DisplayObject;
	import flash.events.Event;
	import flash.geom.Rectangle;

	/**
	 * @author dengyang
	 * @version 1.0
	 * @created 22-01-2010 10:39:40
	 */
	public class Cell extends EventDispatcher {
		
		//------------------------------------
		// private, protected properties
		//------------------------------------
		
		private var _tile : MapTile;
		
		private var _sheet : Sheet;
		
		private	var _view : CellView;

		//------------------------------------
		// public properties
		//------------------------------------
		

		//------------------------------------
		// constructor
		//------------------------------------

		public function Cell(sheet : Sheet, tile : MapTile, width : uint = 32, height : uint = 32) {
			this._sheet = sheet;
			this._tile = tile;
			this._view = new CellView(this, width, height);
			setCellPosition();
//			this.addEventListener(Event.CHANGE, onTileChange);
		}
		
		//
		// PRIVATE, PROTECTED
		//________________________________________________________________________________________________
		
//		private function onTileChange(event : Event) : void {
//			this._view.drawTileType();
//		}

		private function buildRectangle(x : int, y : int) : Rectangle {
			var phyX : int = x * this._sheet.editor.cellWidth;
			var phyY : int = y * this._sheet.editor.cellHeight;
			return new Rectangle(phyX, phyY, this._sheet.editor.cellWidth, this._sheet.editor.cellHeight);
		}
		
		private function setCellPosition() : void {
			this._view.x = this._tile.x * this._sheet.editor.cellWidth;
			this._view.y = this._tile.y * this._sheet.editor.cellHeight;
		}
		
		// PUBLIC
		//________________________________________________________________________________________________
		
		/**
		 * 显示当前单元格类型
		 */
		public function set showTileType(show : Boolean) : void {
			this._view.showTileType = show;
		}
		
		public function set tileType(type : int) : void {
			this._tile.type = type;
			this._view.drawTileType();
		}
		
		public function get tile() : MapTile {
			return this._tile;
		}
		
		public function get view() : DisplayObject {
			return this._view;
		}
		
		/**
		 * only for test
		 */
		public function get canvas() : Bitmap {
			return this._view.canvas;
		}
		
		public function get sheet() : Sheet {
			return this._sheet;
		}

		/**
		 * 
		 * 拷贝一份画布上的信息
		 */
		public function copyCanvas() : BitmapData {
			return _view.copyCanvas();
		}

		/**
		 * 拷贝一份画布上的BitmapData
		 * 
		 * @param sourceBitmapData    画到画布上的图片
		 */
		public function drawCanvas(sourceBitmapData : BitmapData) : void {
			this._view.drawCanvas(sourceBitmapData, buildRectangle(_tile.srcX, _tile.srcY));
		}
		
		/**
		 * 粘贴单元格信息
		 * @param sourceBitmapData    画到画布上的图片
		 */
		public function paste(srcCell : Cell) : void {
			this._tile.paste(srcCell.tile);
			this._view.paste(srcCell);
		}

		/**
		 * 画线框
		 */
		public function drawLine() : void {
			_view.drawLine();
		}

		/**
		 * 画选取上边框
		 */
		public function drawTopRim() : void {
			_view.drawTopRim();
		}
		
		/**
		 * 画选取下边框
		 */
		public function drawBottomRim() : void {
			_view.drawBottomRim();
		}
		
		/**
		 * 画选取左边框
		 */
		public function drawLeftRim() : void {
			_view.drawLeftRim();
		}
		
		/**
		 * 画选取右边框
		 */
		public function drawRightRim() : void {
			_view.drawRightRim();
		}
		
		/**
		 * 画选取上边框
		 */
		public function drawCopyTopRim() : void {
			_view.drawTopRim(CellView.COPY_RIM_COLOR);
		}
		
		/**
		 * 画选取下边框
		 */
		public function drawCopyBottomRim() : void {
			_view.drawBottomRim(CellView.COPY_RIM_COLOR);
		}
		
		/**
		 * 画选取左边框
		 */
		public function drawCopyLeftRim() : void {
			_view.drawLeftRim(CellView.COPY_RIM_COLOR);
		}
		
		/**
		 * 画选取右边框
		 */
		public function drawCopyRightRim() : void {
			_view.drawRightRim(CellView.COPY_RIM_COLOR);
		}
		
		/**
		 * 清除线框
		 */
		public function clearRim() : void {
			_view.clearRim();
		}
		
		public function clear() : void {
			_view.clear();
		}
	}//end Cell
}
