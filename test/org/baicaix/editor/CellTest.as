///////////////////////////////////////////////////////////
//  Cell.as
//  Macromedia ActionScript Implementation of the Class Cell
//  Generated by Enterprise Architect
//  Created on:      22-01-2010 10:39:40
//  Original author: dengyang
///////////////////////////////////////////////////////////

package org.baicaix.editor {
	import flexunit.framework.TestCase;
	import flexunit.framework.TestSuite;

	import org.baicaix.map.MapLayer;
	import org.baicaix.map.MapTile;

	import flash.display.Bitmap;
	import flash.display.BitmapData;
	import flash.display.Loader;
	import flash.events.Event;
	import flash.net.URLRequest;

	/**
	 * @author dengyang
	 * @version 1.0
	 * @created 22-01-2010 10:39:40
	 */
	public class CellTest extends TestCase {

		//------------------------------------
		// private, protected properties
		//------------------------------------

		private var cell : Cell;
		private var _loader : Loader;
//		private var timer : Timer;
		private static var _imageData : BitmapData;

		//------------------------------------
		// public properties
		//------------------------------------
		

		//------------------------------------
		// constructor
		//------------------------------------

		public function CellTest(methodName : String = null) {
			super.methodName = methodName;
			loadImage();
		}

		//
		// PRIVATE, PROTECTED
		//________________________________________________________________________________________________

		private function loadImage() : void {
			if(_imageData == null) {
				_loader = new Loader();
				var m_request : URLRequest = new URLRequest("neil_webb.jpg");
				_loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onComplete);
				_loader.load(m_request);
			}
		}
		
		private function onComplete(event : Event) : void {
			_imageData = Bitmap(_loader.content).bitmapData;
		}
		
		// PUBLIC
		//________________________________________________________________________________________________

		override public function setUp() : void {
			super.setUp();
//			timer = new Timer(3000, 1);
			cell = new Cell(new Sheet(new Editor(), new MapLayer()), new MapTile());
		}

		override public function tearDown() : void {
			super.tearDown();
		}	

		
		/**
		 * 拷贝一份画布上的信息
		 */
		public function testCopyCanvas() : void {
			setUp();
			//准备数据
			//			cell.drawCanvas(_imageData, 0, 0);
			var orig : BitmapData = cell.canvas.bitmapData;
			var copy : BitmapData = cell.copyCanvas();
			//拷贝情况下
			assertNotNull(copy);
			assertTrue(copy != orig);
			assertEquals(copy.width, orig.width);
			assertEquals(copy.height, orig.height);
			assertEquals(copy.getPixel(0, 0), orig.getPixel(0, 0));
			assertEquals(copy.getPixel(1, 1), orig.getPixel(1, 1));
		}

		/**
		 * 拷贝一份画布上的BitmapData
		 * 
		 * @param sourceBitmapData    画到画布上的图片
		 */
		public function testDrawCanvas() : void {
			setUp();
			
//			timer.addEventListener(TimerEvent.TIMER_COMPLETE,addAsync(handleTimerComplete,5000));
//	        timer.start();
	        
	        cell.drawCanvas(_imageData);
			var _part : BitmapData = new BitmapData(cell.canvas.width, cell.canvas.height);
			_part.draw(_imageData);
			
			for (var x : int = 0;x < cell.canvas.width;x++) {
				for (var y : int = 0;y < cell.canvas.height;y++) {
					assertEquals(cell.canvas.bitmapData.getPixel(x, y), _part.getPixel(x, y));
				}
			}
			assertNotNull(cell.canvas.bitmapData.getPixel32(0, 1));
		}

		/**
		 * 將用新的 BitmapData 替換原有的 BitmapData
		 * 
		 * @param sourceBitmapData    画到画布上的图片
		 */
		public function testPaste() : void {
			setUp();
			//准备数据
			var srcCell : Cell = new Cell(new Sheet(new Editor(), new MapLayer()), new MapTile());
			srcCell.drawCanvas(_imageData);
			srcCell.tile.setSource(-1005, 11, 22);
			
			cell.paste(srcCell);
			assertEquals(cell.tile.src, srcCell.tile.src);
			assertEquals(cell.tile.srcX, srcCell.tile.srcX);
			assertEquals(cell.tile.srcY, srcCell.tile.srcY);
			
			for (var x : int = 0;x < cell.canvas.width;x++) {
				for (var y : int = 0;y < cell.canvas.height;y++) {
					assertEquals(cell.canvas.bitmapData.getPixel(x, y), srcCell.canvas.bitmapData.getPixel(x, y));
				}
			}
			assertNotNull(cell.canvas.bitmapData.getPixel32(0, 1));
		}

		/**
		 * 显示当前单元格类型
		 * 
		 * @param type    type
		 */
		public function testShowTypeColor() : void {
		}

		/**
		 * 画线框
		 */
		public function testDrawLine() : void {
			setUp();
			
//			cell.drawLine();
//			var cellImage : BitmapData = new BitmapData(cell.canvas.width, cell.canvas.height);
//			cellImage.draw(cell.view);
//			var tolineY : int = cellImage.width - 1;
//			for (var x : int = 0; x < cellImage.width; x++) {
//				assertEquals(Cell.LINE_RIM_COLOR, cellImage.getPixel(x, 0));
//				assertEquals(Cell.LINE_RIM_COLOR, cellImage.getPixel(x, tolineY));
//			}
//			var toLineX : int = cellImage.height - 1;
//			for (var y : int = 0; y < cellImage.height; y++) {
//				assertEquals(Cell.LINE_RIM_COLOR, cellImage.getPixel(0, y));
//				assertEquals(Cell.LINE_RIM_COLOR, cellImage.getPixel(toLineX, y));
//			}
//			var centerHeight : int = toLineX - 1;
//			var centerWidth : int = tolineY - 1;
//			for (x = 1; x < centerHeight; x++) {
//				for (y = 1; y < centerWidth; y++) {
//					assertFalse(Cell.LINE_RIM_COLOR == cellImage.getPixel(x, y));
//				}
//			}
		}

		/**
		 * 画选取上边框
		 */
		public function testShowTopRim() : void {
		}

		/**
		 * 画选取下边框
		 */
		public function testShowBottomRim() : void {
		}

		/**
		 * 画选取左边框
		 */
		public function testShowLeftRim() : void {
		}

		/**
		 * 画选取右边框
		 */
		public function testShowRightRim() : void {
		}

		/**
		 * 清除线框
		 */
		public function testClearRim() : void {
		}

		public function buildAllTest() : TestSuite {
			var suite : TestSuite = new TestSuite();  
			suite.addTest(new CellTest("testCopyCanvas"));
			suite.addTest(new CellTest("testDrawCanvas"));
			suite.addTest(new CellTest("testPaste"));
			
			suite.addTest(new CellTest("testDrawLine"));
			suite.addTest(new CellTest("testShowTypeColor"));
			
			suite.addTest(new CellTest("testShowTopRim"));
			suite.addTest(new CellTest("testShowBottomRim"));
			suite.addTest(new CellTest("testShowLeftRim"));
			suite.addTest(new CellTest("testShowRightRim"));
			suite.addTest(new CellTest("testClearRim"));
			return suite;
		}
	}//end Cell
}