///////////////////////////////////////////////////////////
//  CellRange.as
//  Macromedia ActionScript Implementation of the Class Range
//  Generated by Enterprise Architect
//  Created on:      22-01-2010 10:41:29
//  Original author: dengyang
///////////////////////////////////////////////////////////

package org.baicaix.editor {
	import flash.geom.Rectangle;
	import flash.utils.Dictionary;

	/**
	 * @author dengyang
	 * @version 1.0
	 * @created 22-01-2010 10:41:29
	 */
	public class Range {

		//------------------------------------
		// private, protected properties
		//------------------------------------
		
		protected var _sheet : Sheet;
		protected var _range : Rectangle;
		protected var _cells : Dictionary;

		//------------------------------------
		// public properties
		//------------------------------------
		

		//------------------------------------
		// constructor
		//------------------------------------

		public function Range(sheet: Sheet = null, range : Rectangle = null) {
			this._sheet = sheet;
			this._range = range;
			if(sheet != null && range != null) {
				selectRange(sheet, range);
			}
		}

		//
		// PRIVATE, PROTECTED
		//________________________________________________________________________________________________
		
		/**
		 * 清除邊框
		 */
		private function clearCellRim(cell : Cell, index : int, array : Array) : void {
			cell.clearRim();
		}
		
		/**
		 * 查找上邊緣單元格
		 */
		protected function findTopCells() : Array {
			var topCells : Array = [];
			for (var x : int = _range.left; x <= _range.right; x++) {
				topCells.push(_cells[x + "," + _range.top]);
			}
			return topCells;
		}
		
		/**
		 * 查找下邊緣單元格
		 */
		protected function findBottomCells() : Array {
			var topCells : Array = [];
			for (var x : int = _range.left; x <= _range.right; x++) {
				topCells.push(_cells[x + "," + _range.bottom]);
			}
			return topCells;
		}
		
		/**
		 * 查找左邊緣單元格
		 */
		protected function findLeftCells() : Array {
			var topCells : Array = [];
			for (var y : int = _range.top; y <= _range.bottom; y++) {
				topCells.push(_cells[_range.left + "," + y]);
			}
			return topCells;
		}
		
		/**
		 * 查找右邊緣單元格
		 */
		protected function findRightCells() : Array {
			var topCells : Array = [];
			for (var y : int = _range.top; y <= _range.bottom; y++) {
				topCells.push(_cells[_range.right + "," + y]);
			}
			return topCells;
		}
		
		// PUBLIC
		//________________________________________________________________________________________________
		
		public function get range() : Rectangle {
			return this._range;
		}

		public function get cells() : Dictionary {
			return this._cells;
		}
		
		public function get sheet() : Sheet {
			return this._sheet;
		}
		
		public function get isResource() : Boolean {
			return this._sheet.isResource;
		}
		
		public function set tileType(type : int) : void {
			for each (var cell : Cell in this._cells) {
				cell.tileType = type;
			}
		}
		

		/**
		 * 選取區域
		 */
		public function selectRange(sheet: Sheet, range : Rectangle) : void {
			this._sheet = sheet;
			this._range = range;
			this._cells = new Dictionary();
			var key : String;
			for (var x : int = _range.left;x <= _range.right;x++) {
				for (var y : int = _range.top;y <= _range.bottom;y++) {
					key = x + "," + y;
					this._cells[key] = _sheet.getCellByKey(key);
				}
			}
		}
		
		/**
		 * 粘贴区域
		 */
		public function pasteRange(sourceCellRange : Range) : void {
			if(this._sheet.isLock || sourceCellRange == null) return;
			//偏移量
			var offsetX : int = this.range.left - sourceCellRange.range.left;
			var offsetY : int = this.range.top - sourceCellRange.range.top;
			//粘貼
			var key : String;
			for each (var sourceCell : Cell in sourceCellRange.cells) {
				key = (sourceCell.tile.x + offsetX) + "," + (sourceCell.tile.y + offsetY);
				var targetCell : Cell = this._sheet.getCellByKey(key);
				//超出边界的处理
				if(targetCell == null) continue;
				targetCell.paste(sourceCell);
			}
		}
		
		public function cancelRange() : void {
			this._sheet.cancelSelectRange();
		}

		/**
		 * 顯示邊框
		 */
		public function drawRim() : void {
			findTopCells().forEach( function (cell : Cell, index : int, array : Array) : void {
				cell.drawTopRim();
			});
			findBottomCells().forEach( function (cell : Cell, index : int, array : Array) : void {
				cell.drawBottomRim();
			});
			findLeftCells().forEach( function (cell : Cell, index : int, array : Array) : void {
				cell.drawLeftRim();
			});
			findRightCells().forEach( function (cell : Cell, index : int, array : Array) : void {
				cell.drawRightRim();
			});
		}
		
		/**
		 * 清除邊框
		 */
		public function clearRim() : void {
			findTopCells().forEach(clearCellRim);
			findBottomCells().forEach(clearCellRim);
			findLeftCells().forEach(clearCellRim);
			findRightCells().forEach(clearCellRim);
		}
		
		public function clear() : void {
			for each (var cell : Cell in _cells) {
				cell.clear();
			}
		}
	}//end Range
}