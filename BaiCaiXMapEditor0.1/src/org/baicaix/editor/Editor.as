///////////////////////////////////////////////////////////
//  Editor.as
//  Macromedia ActionScript Implementation of the Class Editor
//  Generated by Enterprise Architect
//  Created on:      22-01-2010 10:41:16
//  Original author: dengyang
///////////////////////////////////////////////////////////

package org.baicaix.editor {
	import org.baicaix.map.Map;
	import org.baicaix.source.MapManager;
	import org.baicaix.source.ResourceManager;

	import flash.display.BitmapData;

	/**
	 * @author dengyang
	 * @version 1.0
	 * @created 22-01-2010 10:41:16
	 */
	public class Editor {
		
		//------------------------------------
		// private, protected properties
		//------------------------------------
		
		private var _currentSelectRange : Range;
		private var _copyRange : BackupRange;
		
		private var _layerMnger : LayerManager;
		private var _resource : Array;
		
		private var _map : Map;
		
		private var _cellWidth : int;
		private var _cellHeight : int;
		
		private var _srcManager : ResourceManager;
		private var _mapManager : MapManager;

		//------------------------------------
		// public properties
		//------------------------------------
		
		public static const TYPE_EDIT_LAYER : int = 1;
		public static const TYPE_SOURCE_LAYER : int = 0;
		public static const DEFAULT_WIDTH : uint = 32;
		public static const DEFAULT_HEIGHT : uint = 32;
		public static const DEFAULT_TILE_TYPE : uint = 0;

		//------------------------------------
		// constructor
		//------------------------------------

		public function Editor(cellWidth : int = DEFAULT_WIDTH, cellHeight : int = DEFAULT_HEIGHT) {
			this._layerMnger = new LayerManager();
			this._resource = [];
			this._cellWidth = cellWidth;
			this._cellHeight = cellHeight;
			this._srcManager = new ResourceManager();
			this._mapManager = new MapManager();
		}

		//
		// PRIVATE, PROTECTED
		//________________________________________________________________________________________________
		
		private function backupSelectRange(isCut : Boolean) : void {
			if(_currentSelectRange == null) return;
			this._copyRange = new BackupRange(_currentSelectRange); 
			this._copyRange.isCut = isCut;
			this._copyRange.drawRim();
		}
		
		// PUBLIC
		//________________________________________________________________________________________________
		
		public function get cellWidth() : int {
			return this._cellWidth;	
		}
		
		public function get cellHeight() : int {
			return this._cellHeight;	
		}
		
		public function get map() : Map {
			return this._map;
		}

		/**
		 * 選取區域
		 * @param index    index
		 */
		public function set selectRange(selectRange : Range) : void {
			this._currentSelectRange = selectRange;
		}

		/**
		 * 拷貝區域
		 */
		public function copyRange() : void {
			backupSelectRange(false);
		}

		/**
		 * 拷貝區域
		 */
		public function cutRange() : void {
			backupSelectRange(true);
		}

		/**
		 * 粘貼區域
		 */
		public function pasteRange() : void {
			if(_currentSelectRange == null) return;
			if(!_currentSelectRange.isResource) {
				_currentSelectRange.pasteRange(_copyRange);
			}
		}
		
		/**
		 * 取消选取区域
		 */
//		public function cancelSelectRange() : void {
//			this._selectRange.clearRim();
//			this._selectRange = null;
//			//TODO 显示层待实现			
//		}
		
		/**
		 * 取消拷贝内容
		 */
		public function cancelCopyRange() : void {
			this._copyRange.clearRim();
			this._copyRange = null;
		}
		
		/**
		 * 取消拷贝内容
		 */
		public function cancelSelectRange() : void {
			this._currentSelectRange.clearRim();
			this._currentSelectRange.sheet.cancelSelectRange();
			this._currentSelectRange = null;
		}
		
		public function setTileType(tileType : int = DEFAULT_TILE_TYPE) : void {
			if(_currentSelectRange == null) return;
			this._currentSelectRange.tileType = tileType;
		}

		public function showTileType() : void {
			for each (var sheet : Sheet in _layerMnger.layers) {
				sheet.showTileType();
			}
		}
		
		public function hideTileType() : void {
			for each (var sheet : Sheet in _layerMnger.layers) {
				sheet.hideTileType();
			}
		}

		/**
		 * 
		 * @param z
		 * @param name    name
		 */
		public function addEmptyLayer(z : int, name : String) : Sheet {
			var sheet : Sheet = new Sheet(this, _map.createTemptyLayer(0, z, name));
			sheet.initEditableCells();
			_layerMnger.registerLayer(sheet);
			return sheet;
		}
		
		public function addResourceLayer(sourceBitmapData : BitmapData, srcIndex : int) : Sheet {
			var sheet : Sheet = new Sheet(this, _map.createTemptyLayer());
			sheet.initCellsBySrc(sourceBitmapData, srcIndex);
			_layerMnger.registerLayer(sheet);
			return sheet;
		}
		
		public function createMap(width : int = 16, height : int = 16) : void {
			this._map = new Map(width, height);
		}

		public function loadResource(index : int) : BitmapData {
			return this._srcManager.load(index);
		}
	}//end Editor
}